---
import Link from './Link.astro'
import MenuIcon from '@icons/Menu.astro'
import { Icons } from '@components/Icons'

const NAVIGATION_LINKS = [
	// {
	// 	title: 'Patrocinadores',
	// 	href: '#sponsors'
	// },
	{
		title: 'Speakers',
		href: '#speakers'
	},
	// {
	// 	title: 'Agenda',
	// 	href: '#agenda'
	// },
	// {
	// 	title: 'Tickets',
	// 	href: '#ticket'
	// },
	{
		title: 'CÃ³digo de conducta',
		href: '#coc'
	}
]
---

<header
	class='bg-black/80 z-10 backdrop-blur-lg flex flex-row items-center justify-center xl:justify-center text-primary px-4 xl:sticky xl:top-0 gap-x-10'
>
	<a href='/#'>
		<Icons.logo class='xl:w-36 w-72 lg:w-80 h-full mx-auto animate-zoomIn' />
	</a>

	<input type='checkbox' id='menu' hidden class='peer' />
	<label
		for='menu'
		class='bg-zinc-800 hidden w-14 h-14 border-zinc-500 items-center justify-center rounded-full border fixed right-4 bottom-4 xl:relative z-50 xl:hidden peer-checked:[&>.first]:hidden peer-checked:[&>.last]:block cursor-pointer hover:scale-125 transition hover:border-white'
	>
		<MenuIcon />
	</label>

	<nav
		id='navbar'
		class='min-h-screen hidden last sticky top-0 left-0 pointer-events-none opacity-0 peer-checked:opacity-100 peer-checked:pointer-events-auto right-0 z-40 flex py-12 px-8  text-center xl:opacity-100 xl:pointer-events-auto xl:min-h-0 xl:relative xl:px-0 justify-center flex-col xl:mt-1 transition-opacity xl:transition-all'
	>
		<ul class='flex flex-col md:flex-row gap-8'>
			{
				NAVIGATION_LINKS.map(({ title, href }) => (
					<li>
						<Link href={href} title={title} />
					</li>
					)
				)
			}
		</ul>
		
	</nav>
</header>

<script type='module'>
const sections = document.querySelectorAll('main > section')
const links = document.querySelectorAll('#navbar a')

let direction = 'up'
let prevYPosition = 0

const setScrollDirection = () => {
	direction =
			document.documentElement.scrollTop > prevYPosition ? 'down' : 'up'

	prevYPosition = document.documentElement.scrollTop
}

const options = {
	root: null,
	threshold: 0,
	rootMargin: '0px'
}

const getTargetSection = (entry) => {
	const index = sections.findIndex((section) => section === entry.target)

	if (index >= sections.length - 1) {
		return entry.target
	}

	return sections[index + 1]
}

const updateLink = (target) => {
	console.log('updateLink', target)
}

const onIntersect = (entries) => {
	entries.forEach((entry) => {
		direction = document.documentElement.scrollTop > prevYPosition ? 'down' : 'up'

		prevYPosition = document.documentElement.scrollTop

		const target =
				direction === 'down' ? getTargetSection(entry) : entry.target

		if (shouldUpdate(entry)) {
			updateLink(target)
		}
	})
}

const shouldUpdate = (entry) => {
	if (direction === 'down' && !entry.isIntersecting) {
		return true
	}

	if (direction === 'up' && entry.isIntersecting) {
		return true
	}

	return false
}

const observer = new IntersectionObserver(onIntersect, options)

sections.forEach((section) => {
	observer.observe(section)
})
</script>

<script type='module'>
const menuCheckbox = document.getElementById('menu')
const mediaQuery = window.matchMedia('(min-width: 1024px)') // Breakpoint lg

const $navbar = document.querySelector('#navbar')
$navbar.querySelectorAll('a').forEach((anchor) => {
	anchor.addEventListener('click', (_event) => {
		menuCheckbox.checked = false
		if (document.body.style.overflowY === 'hidden') {
			hideOverFlow(false)
		}
	})
})

/** @param {boolean} value */
function hideOverFlow (value) {
	document.body.style.overflowY = value ? 'hidden' : 'auto'
}

menuCheckbox.addEventListener('change', (e) =>
	e.target.checked ? hideOverFlow(true) : hideOverFlow(false)
)

mediaQuery.addEventListener('change', (e) => {
	if (e.matches) {
		hideOverFlow(false)
		menuCheckbox.checked = false
	}
})
</script>
